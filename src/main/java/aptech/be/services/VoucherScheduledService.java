package aptech.be.services;

import aptech.be.models.Customer;
import aptech.be.models.CustomerDetail;
import aptech.be.models.Voucher;
import aptech.be.models.enums.CampaignType;
import aptech.be.models.enums.CustomerGroup;
import aptech.be.repositories.CustomerRepository;
import aptech.be.repositories.VoucherRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class VoucherScheduledService {

    @Autowired
    private VoucherService voucherService;

    @Autowired
    private VoucherRepository voucherRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private EmailService emailService;

    // G·ª≠i voucher sinh nh·∫≠t h√†ng ng√†y l√∫c 9h s√°ng
    @Scheduled(cron = "0 0 9 * * ?")
    public void sendBirthdayVouchers() {
        System.out.println("Checking for birthday vouchers...");
        
        // L·∫•y voucher sinh nh·∫≠t ƒëang ho·∫°t ƒë·ªông
        List<Voucher> birthdayVouchers = voucherRepository.findByCampaignType(CampaignType.BIRTHDAY);
        
        for (Voucher voucher : birthdayVouchers) {
            if (voucher.isValid()) {
                // L·∫•y danh s√°ch kh√°ch h√†ng c√≥ sinh nh·∫≠t h√¥m nay
                List<Customer> birthdayCustomers = getCustomersWithBirthdayToday();
                
                if (!birthdayCustomers.isEmpty()) {
                    List<Long> customerIds = birthdayCustomers.stream()
                            .map(Customer::getId)
                            .collect(Collectors.toList());
                    
                    voucherService.sendVouchersToCustomers(voucher.getId(), customerIds);
                    
                    // G·ª≠i email ch√∫c m·ª´ng sinh nh·∫≠t
                    for (Customer customer : birthdayCustomers) {
                        sendBirthdayEmail(customer, voucher);
                    }
                }
            }
        }
    }

    // G·ª≠i voucher Black Friday v√†o ng√†y 25/11 l√∫c 00:00
    @Scheduled(cron = "0 0 0 25 11 ?")
    public void sendBlackFridayVouchers() {
        System.out.println("Sending Black Friday vouchers...");
        
        List<Voucher> blackFridayVouchers = voucherRepository.findByCampaignType(CampaignType.BLACK_FRIDAY);
        
        for (Voucher voucher : blackFridayVouchers) {
            if (voucher.isValid()) {
                // G·ª≠i cho t·∫•t c·∫£ kh√°ch h√†ng ho·∫∑c nh√≥m kh√°ch h√†ng c·ª• th·ªÉ
                List<Customer> allCustomers = customerRepository.findAll();
                List<Long> customerIds = allCustomers.stream()
                        .map(Customer::getId)
                        .collect(Collectors.toList());
                
                voucherService.sendVouchersToCustomers(voucher.getId(), customerIds);
            }
        }
    }

    // G·ª≠i voucher nƒÉm m·ªõi v√†o ng√†y 1/1 l√∫c 00:00
    @Scheduled(cron = "0 0 0 1 1 ?")
    public void sendNewYearVouchers() {
        System.out.println("Sending New Year vouchers...");
        
        List<Voucher> newYearVouchers = voucherRepository.findByCampaignType(CampaignType.NEW_YEAR);
        
        for (Voucher voucher : newYearVouchers) {
            if (voucher.isValid()) {
                // G·ª≠i cho t·∫•t c·∫£ kh√°ch h√†ng
                List<Customer> allCustomers = customerRepository.findAll();
                List<Long> customerIds = allCustomers.stream()
                        .map(Customer::getId)
                        .collect(Collectors.toList());
                
                voucherService.sendVouchersToCustomers(voucher.getId(), customerIds);
            }
        }
    }

    // G·ª≠i voucher cho kh√°ch h√†ng VIP h√†ng th√°ng
    @Scheduled(cron = "0 0 10 1 * ?") // Ng√†y 1 h√†ng th√°ng l√∫c 10h s√°ng
    public void sendVIPMonthlyVouchers() {
        System.out.println("Sending VIP monthly vouchers...");
        
        // L·∫•y danh s√°ch kh√°ch h√†ng VIP
        List<Customer> vipCustomers = getVIPCustomers();
        
        if (!vipCustomers.isEmpty()) {
            // T·∫°o voucher ƒë·∫∑c bi·ªát cho VIP (c√≥ th·ªÉ implement logic t·∫°o voucher ƒë·ªông)
            // Ho·∫∑c s·ª≠ d·ª•ng voucher c√≥ s·∫µn v·ªõi target group VIP
            List<Voucher> vipVouchers = voucherRepository.findByTargetGroup(CustomerGroup.VIP);
            
            for (Voucher voucher : vipVouchers) {
                if (voucher.isValid()) {
                    List<Long> customerIds = vipCustomers.stream()
                            .map(Customer::getId)
                            .collect(Collectors.toList());
                    
                    voucherService.sendVouchersToCustomers(voucher.getId(), customerIds);
                }
            }
        }
    }

    // G·ª≠i voucher cho kh√°ch h√†ng ƒëƒÉng k√Ω newsletter h√†ng tu·∫ßn
    @Scheduled(cron = "0 0 9 * * MON") // Th·ª© 2 h√†ng tu·∫ßn l√∫c 9h s√°ng
    public void sendNewsletterVouchers() {
        System.out.println("Sending newsletter vouchers...");
        
        // L·∫•y danh s√°ch kh√°ch h√†ng ƒëƒÉng k√Ω newsletter
        List<Customer> newsletterCustomers = getNewsletterSubscribers();
        
        if (!newsletterCustomers.isEmpty()) {
            List<Voucher> newsletterVouchers = voucherRepository.findByTargetGroup(CustomerGroup.NEWSLETTER_SUBSCRIBER);
            
            for (Voucher voucher : newsletterVouchers) {
                if (voucher.isValid()) {
                    List<Long> customerIds = newsletterCustomers.stream()
                            .map(Customer::getId)
                            .collect(Collectors.toList());
                    
                    voucherService.sendVouchersToCustomers(voucher.getId(), customerIds);
                }
            }
        }
    }

    // Helper methods
    private List<Customer> getCustomersWithBirthdayToday() {
        // Logic ƒë·ªÉ l·∫•y kh√°ch h√†ng c√≥ sinh nh·∫≠t h√¥m nay
        // C·∫ßn th√™m tr∆∞·ªùng birthDate v√†o CustomerDetail
        return customerRepository.findAll().stream()
                .filter(customer -> {
                    CustomerDetail detail = customer.getCustomerDetail();
                    // T·∫°m th·ªùi return false, c·∫ßn implement logic ki·ªÉm tra ng√†y sinh
                    return false;
                })
                .collect(Collectors.toList());
    }

    private List<Customer> getVIPCustomers() {
        return customerRepository.findAll().stream()
                .filter(customer -> {
                    CustomerDetail detail = customer.getCustomerDetail();
                    if (detail != null) {
                        // Ki·ªÉm tra customer level
                        if ("VIP".equals(detail.getCustomerLevel()) || "PREMIUM".equals(detail.getCustomerLevel())) {
                            return true;
                        }
                        // Ki·ªÉm tra ƒëi·ªÉm t√≠ch l≈©y
                        if (detail.getPoint() != null) {
                            try {
                                int points = Integer.parseInt(detail.getPoint());
                                return points >= 1000;
                            } catch (NumberFormatException e) {
                                return false;
                            }
                        }
                    }
                    return false;
                })
                .collect(Collectors.toList());
    }

    private List<Customer> getNewsletterSubscribers() {
        return customerRepository.findAll().stream()
                .filter(customer -> {
                    CustomerDetail detail = customer.getCustomerDetail();
                    return detail != null && Boolean.TRUE.equals(detail.getNewsletterSubscribed());
                })
                .collect(Collectors.toList());
    }

    private void sendBirthdayEmail(Customer customer, Voucher voucher) {
        String subject = "Ch√∫c m·ª´ng sinh nh·∫≠t! B·∫°n c√≥ voucher ƒë·∫∑c bi·ªát";
        String content = String.format(
            "Xin ch√†o %s,\n\n" +
            "Ch√∫c m·ª´ng sinh nh·∫≠t! üéâ\n\n" +
            "Nh√¢n d·ªãp sinh nh·∫≠t c·ªßa b·∫°n, ch√∫ng t√¥i g·ª≠i t·∫∑ng voucher ƒë·∫∑c bi·ªát:\n" +
            "M√£ voucher: %s\n" +
            "Gi·∫£m gi√°: %s\n" +
            "H·∫°n s·ª≠ d·ª•ng: %s\n\n" +
            "Ch√∫c b·∫°n c√≥ m·ªôt ng√†y sinh nh·∫≠t th·∫≠t vui v·∫ª!\n" +
            "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!",
            customer.getFullName(),
            voucher.getCode(),
            voucher.getType().toString().equals("PERCENTAGE") ? 
                voucher.getDiscountValue() + "%" : voucher.getDiscountValue() + " VND",
            voucher.getEndDate().toString()
        );
        
        emailService.sendEmail(customer.getEmail(), subject, content);
    }
} 